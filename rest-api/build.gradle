import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import com.bmuschko.gradle.docker.tasks.image.DockerTagImage

ext {
    imageName = imagePrefix + '/rest-api'
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url "https://jitpack.io"
    }
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'application'
apply plugin: 'com.bmuschko.docker-remote-api'

dependencies {

    compile project(':minimesos')

    compile "com.sparkjava:spark-core:2.3"

    compile 'org.slf4j:jcl-over-slf4j:1.7.12'
    compile 'org.slf4j:log4j-over-slf4j:1.7.12'
    compile 'org.slf4j:jul-to-slf4j:1.7.12'

    compile 'org.slf4j:slf4j-api:1.7.12'

}

mainClassName = "com.containersol.minimesos.restapi.RestApi"

jar {
    baseName = "rest-api"
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest {
        attributes(
                'Main-Class'                : mainClassName,
                'Implementation-Version'    : project.version
        )
    }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
}

task copyFilesForDocker(type: Copy) {
    dependsOn   'jar'
    from        "build/libs/rest-api.jar"
    into        'build/docker'
    rename { String fileName ->
        fileName.replace("-${project.version}", "")
    }
}

task copyDockerfile(type: Copy) {
    dependsOn   'copyFilesForDocker'
    from        "Dockerfile"
    into        'build/docker'
}

artifacts {
    archives jar
}

test {
    testLogging {
        showStandardStreams = true
    }
}

afterEvaluate { project ->
    if (new File(project.projectDir, 'Dockerfile').exists()) {
        if (!project.hasProperty('imageName')) {
            throw new GradleException('Root directory of ' + project.name
                    + ' contains Dockerfile, but it does not define project.ext.imageName value')
        }
        docker.url = 'unix:///var/run/docker.sock'
        if(!System.properties['os.name'].equals('Mac OS X')) {
            docker.certPath = null
        }
        if (System.env.DOCKER_HOST) {
            docker.url = "$System.env.DOCKER_HOST".replace("tcp","https")
            if (System.env.DOCKER_CERT_PATH) {
                docker.certPath = new File(System.env.DOCKER_CERT_PATH)
            }
        }
        task buildDockerImage(type: DockerBuildImage, dependsOn: [copyDockerfile], description: 'build Docker image') {
            inputDir = new File( "${buildDir}/docker")
            tag = project.imageName
        }
        project.build.dependsOn buildDockerImage
        [ 'snapshot', 'version' ].each { aTag ->
            String uppercasedName = aTag.capitalize()
            task "tagDockerImageWith$uppercasedName"(type: DockerTagImage, description: 'tag Docker image') {
                imageId = project.imageName
                tag = ( 'version'.equals(aTag) ) ? project.version : aTag
                repository = project.imageName
                force = true
            }
            task "publishDockerImageWith$uppercasedName"(type: DockerPushImage, dependsOn: ["tagDockerImageWith$uppercasedName"],
                    description: 'publish Docker image') {
                imageName = project.imageName
                tag = ( 'version'.equals(aTag) ) ? project.version : aTag
                doFirst {
                    ['dockerHubUsername', 'dockerHubPassword', 'dockerHubEmail'].each {
                        assert project.hasProperty(it) : 'Undefined "' + it + '" property'
                    }
                    docker {
                        registryCredentials {
                            username = project.property('dockerHubUsername')
                            password = project.property('dockerHubPassword')
                            email = project.property('dockerHubEmail')
                        }
                    }
                }
            }
        }
    }
}

assemble.dependsOn copyDockerfile
